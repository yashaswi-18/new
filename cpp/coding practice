

1. Execute the given function.
def differenceofSum(n.m)

The function takes two integrals m and n as arguments. You are required to obtain the total of all integers ranging between 1 to n (both inclusive) which are not divisible by m. You must also return the distinction between the sum of integers not divisible by m with the sum of integers divisible by m.

Assumption

m > 0 and n > 0
Sum lies within the integral range
 
Example

Input:
m = 6
n = 30

Output:
285

Integers divisible by 6 are 6, 12, 18, 24, and 30. Their sum is 90.
Integers that are not divisible by 6 are 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 25, 26, 27, 28, and 29. Their sum is 375.
The difference between them is 285 (375 – 90).
 
Sample input:
m = 3
n = 10

Sample output:
19

#include<iostream>
using namespace std;

int diffSum(int m,int n)
{
    int not_divisible_m=0;
    int divisible_m=0;
    
    for(int i=1;i<=n;i++)
    {
        if(i%m==0)
        {
            divisible_m+=i;
            
        }
        else{
            not_divisible_m+=i;
            
        }
    }
    return not_divisible_m-divisible_m;
}



int main()
{
    int n,m;
    cout<<"Enter the m :- ";
    cin>>m;
    cout<<"Enter the value of n :- ";
    cin>>n;
    
    cout<<"The difference sum is "<<diffSum(m,n);
}


 

2. Execute the given function.
def LargeSmallSum(arr)

The function takes an integral arr which is of the size or length of its arguments. Return the sum of the second smallest element at odd position ‘arr’ and the second largest element at the even position.

Assumption

Every array element is unique.
Array is 0 indexed.
Note:

If the array is empty, return 0.
If array length is 3 or <3, return 0.
 
Example

Input:
Arr: 3 2 1 7 5 4

Output:
7
 

Explanation

The second largest element at the even position is 3.
The second smallest element at the odd position is 4.
The output is 7 (3 + 4).
 
#include <iostream>

int LargeSmallSum(int arr[], int n) {
    // Check for special cases
    if (n == 0 || n < 3) {
        return 0;
    }

    int secondLargestEven = -1;
    int largestEven = -1;
    int secondSmallestOdd = INT_MAX;
    int smallestOdd = INT_MAX;

    // Traverse the array and find the second largest even and second smallest odd
    for (int i = 0; i < n; i++) {
        if (i % 2 == 0) {
            // Even position
            if (arr[i] > largestEven) {
                secondLargestEven = largestEven;
                largestEven = arr[i];
            } else if (arr[i] > secondLargestEven && arr[i] != largestEven) {
                secondLargestEven = arr[i];
            }
        } else {
            // Odd position
            if (arr[i] < smallestOdd) {
                secondSmallestOdd = smallestOdd;
                smallestOdd = arr[i];
            } else if (arr[i] < secondSmallestOdd && arr[i] != smallestOdd) {
                secondSmallestOdd = arr[i];
            }
        }
    }

    // Check if valid elements were found
    if (secondLargestEven != -1 && secondSmallestOdd != INT_MAX) {
        return secondLargestEven + secondSmallestOdd;
    } else {
        return 0; // Not enough elements to calculate the sum
    }
}

int main() {
    int arr[] = {3, 2, 1, 7, 5, 4};
    int n = sizeof(arr) / sizeof(arr[0]);
    int result = LargeSmallSum(arr, n);
    std::cout << "Output: " << result << std::endl;
    return 0;
}


3. Write a function to validate if the provided two strings are anagrams or not. If the two strings are anagrams, then return ‘yes’. Otherwise, return ‘no’.
Input:

Input 1: 1st string
Input 2: 2nd string

Output:
(If they are anagrams, the function will return ‘yes’. Otherwise, it will return ‘no’.)

Example

Input 1: Listen
Input 2: Silent

Output:
Yes

Explanation

Listen and Silent are anagrams (an anagram is a word formed by rearranging the letters of the other word).

 

Also Read About - Difference between argument and parameter

Accenture Coding Questions in Python
4. Perform the following function. 
def Productsmallpair(sum,arr)

This function accepts the integers sum and arr. It is used to find the arr(j) and arr(k), where k ! = j. arr(j) and arr(k) should be the smallest elements in the array.

Keep this in mind:

If n<2 or empty, return –1.
If these pairs are not found, then return to zero.
Make sure all the values are within the integer range.
 
Example

Input:
Sum: 9
Arr: 5 4 2 3 9 1 7

Output:
2

Explanation

From the array of integers, we have to select the two smallest numbers, i.e 2 and 1. Sum of these two (2 + 1) = 3. This is less than 9 (3 < 9). The product of these two is 2 (2 x 1 = 2) Hence the output is integer 2.

Sample input:
Sum: 4
Arr: 9 8 –7 3 9 3

Sample output:
–21
 

5. Perform the function for the given purpose.
For writing numbers, there is a system called N-base notation. This system uses only N-based symbols. It uses symbols that are listed as the first n symbols. Decimal and n-based notations are 0:0, 1:1, 2:2, …, 10:A, 11:B, …, 35:Z.

Perform the function: Chats DectoNBase(int n, int num)

This function only uses positive integers. Use a positive integer n and num to find out the n-base that is equal to num.

Steps

Select a decimal number and divide it by n. Consider this as an integer division.
Denote the remainder as n-based notation.
Again divide the quotient by n.
Repeat the above steps until you get a 0 remainder.
The remainders from last to first are the n-base values.
 
Assumption
1 < n < = 36

Example

Input:
N: 12
Num: 718

Output:
4BA

Explanation

num	Divisor	Quotient	Remainder
718	12	59	10(A)
59	2	4	11(B)
4	12	0	4(4)
Sample input:
N: 21
Num: 5678

Sample output:
CI8
 

6. Execute the function for the given purpose.
When the sum of the digits exceeds a total of 9, a carry digit is added to the right-left of the digit. Execute the function: Int Numberofcarry(Integer num 1, Integer num 2)

Assumption

num1, num2 > = 0

Example

Input:
num1: 451
num2: 349

Output:
2

Explanation

When we add these two numbers from the right to the left, we get two carries. The value of each of the carries is 1. Hence, the output is the total of these two carries, i.e., 2.

Sample input:
num1: 23
num2: 563

Sample output:
0
 

7. The given function has a string (str) and two characters, ch1 and ch2. Execute the function in such a way that str returns to its original string, and all the events in ch1 are replaced by ch2, and vice versa.
Replacecharacter(Char str1, Char ch1, Int 1, Char ch2)

Assumption

This string has only alphabets that are in lower case.

Example

Input:
str: apples
ch1: a
ch2: p

Output:
paales

Explanation
All the ‘a’ in the string is replaced with ‘p’. And all the ‘p’s are replaced with ‘a’.

#include <iostream>
#include <string>

void ReplaceCharacter(std::string& str, char ch1, char ch2) {
    for (int i = 0; i < str.length(); i++) {
        if (str[i] == ch1) {
            str[i] = ch2;
        } else if (str[i] == ch2) {
            str[i] = ch1;
        }
    }
}

int main() {
    std::string str;
    char ch1, ch2;

    // Input the string and characters
    std::cout << "Enter the string: ";
    std::cin >> str;

    std::cout << "Enter character 1: ";
    std::cin >> ch1;

    std::cout << "Enter character 2: ";
    std::cin >> ch2;

    // Call the ReplaceCharacter function to replace characters
    ReplaceCharacter(str, ch1, ch2);

    // Output the modified string
    std::cout << "Output: " << str << std::endl;

    return 0;
}


Accenture Coding Questions In Java
8. Perform the function: Int operationchoices(int c, int n, int a, int b). This function considers three positive inputs of a, b and c.
Execute the function to get:
(a + b), if c = 1
(a / b), if c = 4
(a – b), if c = 2
(a x b), if c = 3

Example:

Input:
a: 12
b: 16
c: 1

Output:
28

Explanation
C = 1, hence the function is (a + b). Hence, the output is 28.

Sample input:
a: 16
b: 20
c: 2

Sample output:
–4
 

9. Perform the function Int calculate(int m, int n). This function needs two positive integers. Calculate the sum of numbers between these two numbers that are divisible by 3 and 5.
Assumption
m > n > = 0

Example

Input:
m: 12
n: 50

Output:
90

Explanation
The numbers between 12 and 50 that are divisible by 3 and 5 are 15, 30, and 45. The sum of these numbers is 90.

Sample input:
m: 100
n: 160

Sample output:
405
 

10. Execute the function for the given purpose.
Create a matrix and mention the elements in it. Now, divide the main matrix into two halves in such a way that the elements in index 0 are even, the elements in index 1 are odd, and so on.

Then arrange the values in ascending order for even and odd. After this, calculate the sum of the second largest numbers from both even and odd matrices.

Example
The size of the array is 5.
Element at 0 index: 3
Element at 1 index: 4
Element at 2 index: 1
Element at 3 index: 7
Element at 4 index: 9

Even array: 1,3,9
Odd array: 4,7

#include <iostream>

int main() {
    int n;
    std::cout << "Enter the size of the array: ";
    std::cin >> n;

    if (n <= 0) {
        std::cout << "Invalid input size. Please enter a positive integer." << std::endl;
        return 1;
    }

    int matrix[n];

    for (int i = 0; i < n; i++) {
        std::cout << "Element at " << i << " index: ";
        std::cin >> matrix[i];
    }

    int evenArray[n];
    int oddArray[n];
    int evenCount = 0;
    int oddCount = 0;

    // Divide the matrix into even and odd halves
    for (int i = 0; i < n; i++) {
        if (i % 2 == 0) {
            evenArray[evenCount++] = matrix[i];
        } else {
            oddArray[oddCount++] = matrix[i];
        }
    }

    // Sort the even and odd arrays in ascending order using bubble sort
    for (int i = 0; i < evenCount - 1; i++) {
        for (int j = 0; j < evenCount - i - 1; j++) {
            if (evenArray[j] > evenArray[j + 1]) {
                int temp = evenArray[j];
                evenArray[j] = evenArray[j + 1];
                evenArray[j + 1] = temp;
            }
        }
    }

    for (int i = 0; i < oddCount - 1; i++) {
        for (int j = 0; j < oddCount - i - 1; j++) {
            if (oddArray[j] > oddArray[j + 1]) {
                int temp = oddArray[j];
                oddArray[j] = oddArray[j + 1];
                oddArray[j + 1] = temp;
            }
        }
    }

    int evenSum = 0;
    int oddSum = 0;

    // Calculate the sum of the second largest numbers from even and odd arrays
    if (evenCount >= 2) {
        evenSum = evenArray[evenCount - 2];
    }
    if (oddCount >= 2) {
        oddSum = oddArray[oddCount - 2];
    }

    std::cout << "Even array: ";
    for (int i = 0; i < evenCount; i++) {
        std::cout << evenArray[i] << " ";
    }
    std::cout << std::endl;

    std::cout << "Odd array: ";
    for (int i = 0; i < oddCount; i++) {
        std::cout << oddArray[i] << " ";
    }
    std::cout << std::endl;

    std::cout << "Sum of the second largest numbers from even and odd arrays: " << evenSum + oddSum << std::endl;

    return 0;
}


Accenture Coding Questions in C
11. The binary number system only uses two digits 1 and 0.
Perform the function: Int OperationsBinarystring(char* str)

Assumptions

Return to –1 if str is null.
The str is odd.
 
Example:

Input:
Str: ICOCICIAOBI

Output:
1

Explanation
The input when expanded is “1 XOR 0 XOR 1 XOR 1 XOR 1 AND 0 OR 1”. The result becomes 1 and hence the output is 1.
 
#include <iostream>
#include <cstring>

int OperationsBinaryString(char* str) {
    if (str == nullptr) {
        return -1;
    }

    int result = str[0] - '0'; // Initialize the result with the first character

    for (int i = 1; str[i] != '\0'; i += 2) {
        char operation = str[i];
        int operand = str[i + 1] - '0';

        if (operation == 'X') {
            result ^= operand;
        } else if (operation == 'A') {
            result &= operand;
        } else if (operation == 'O') {
            result |= operand;
        }
    }

    return result;
}

int main() {
    char str[] = "ICOCICIAOBI";
    int result = OperationsBinaryString(str);
    
    if (result == -1) {
        std::cout << "Invalid input string (null)." << std::endl;
    } else {
        std::cout << "Output: " << result << std::endl;
    }

    return 0;
}


12. Perform the function Checkpassword (char str[], int n)
Execute the function which happens to be 1 if the str is a valid password or it remains 0.

Conditions for a valid password: 

The password should have at least 4 characters.
It should have at least 1 digit.
It should have one capital letter.
It should not have any spaces or obliques (/).
The first character should not be a number.
 
Assumption
The input is not empty.

Example

Input:
aA1_67

Output:
1
 
#include <iostream>
#include <cstring>
#include <cctype>

int CheckPassword(char str[], int n) {
    // Check if the password has at least 4 characters
    if (n < 4) {
        return 0;
    }

    // Check if the first character is a number
    if (isdigit(str[0])) {
        return 0;
    }

    // Initialize flags for the other conditions
    bool hasDigit = false;
    bool hasUpperCase = false;

    // Check each character in the string
    for (int i = 0; i < n; i++) {
        char ch = str[i];

        // Check for spaces or obliques
        if (ch == ' ' || ch == '/') {
            return 0;
        }

        // Check for a digit
        if (isdigit(ch)) {
            hasDigit = true;
        }

        // Check for an uppercase letter
        if (isupper(ch)) {
            hasUpperCase = true;
        }
    }

    // Check if at least 1 digit and 1 uppercase letter were found
    if (hasDigit && hasUpperCase) {
        return 1; // Valid password
    } else {
        return 0; // Invalid password
    }
}

int main() {
    char str[100];
    std::cout << "Enter a password: ";
    std::cin >> str;

    int n = strlen(str);

    int result = CheckPassword(str, n);

    if (result == 1) {
        std::cout << "1" << std::endl;
    } else {
        std::cout << "0" << std::endl;
    }

    return 0;
}

13. Execute this function Void MaxInArray(int arr[], int length)
This function helps in finding the maximum element in the array. Execute this function to print the maximum element in the array with its index.

Assumptions

The index in the array for all the elements starts at 0.
The maximum element is in a different line in the output.
There has to be only one maximum element.
The function prints only what is required.
 
Example

Input:
23 45 82 27 66 12 78 13 71 86

Output:
86
9

Explanation
The maximum element is 86 and the array is 9.
 

14. Change frequent character
The function to execute is
ChatFrequentcharacter(Char str, char x)

This function has a string and a character. This function requires replacing the most used character in the str with the ‘x’ character.

Note: If two characters have the same frequency, then we will have to consider the frequency which has the lower ASCII value.

Example

Input:
str: bbadbbababb
char x: t

Output:
ttadttatatt

Explanation
The maximum character repeated is ‘b’ that is replaced with ‘t’.
 Also read, Software Testing

15. Execute the function Def Autocount(n).
The function accepts the string n. It checks whether the number is an autobiographical number or not. If an integer returns, then it is an autobiographical number. If 0 returns, then it is not an autobiographical number.

Assumption

The input value should not be more than 10 characters.
The input string will have numeric characters.
 
Example

Input:
N: “1210”

Output:
3

Explanation
The 0th position has the number 1, the 1st position has the number 2, the 2nd position has the number 1, and the 3rd position has number 0. Hence, it is an autobiographical number.

The count of autobiographical numbers in the input is 3, hence 3 is returned.
 
Click here to learn about, Html interview questions

16. In a given list of integers, find the number that has the highest frequency. If there are one or more such numbers, give the smaller one as output.
Input:
3
7
2 4 5 2 3 2 4
6
1 2 1 1 2 1
10
1 1 1 1 1 1 1 1 1 1

Output:
2
1
1
 

17. Execute the function for the given purpose.
Write a function mergeArrays which merges two sorted arrays to create one single sorted array. Complete the function int* mergeArrays(int a[], int b[], int asize, int bsize) below which takes the pointers to the first element of the two sorted arrays and the size of the arrays, and returns the base address of the final sorted array.

Input:
4 // Size of 1st array
1 2 3 6 // Elements of 1st array
3 // Size of 2nd array
4 5 7 // Elements of 2nd array

Output:
1
2
3
4
5
6
7
 

18. Create web access management to the kth largest number. It will accept an integer k and an array arr as its conditions and has to return the greatest element based on the value of k. That is, if k = 0, return the greatest element. If k = 1, return the second greatest element, and so on.
Example

Suppose the array contains values like {74, 85, 102, 99, 101, 56, 84} and the integer k is 2. The method will return 99, the third greatest element, as there are only two (according to the value of k) values greater than 99 (101 and 102).
 

19. We have mentioned a list of integers that have no duplicates. Find how many swaps it will take to sort the list in ascending order using Bubble sort.
Input:
3
5
2 1 4 6 3
10
123 21 34 45 25 675 23 44 55 900
1
23

Output:
3
16
0
 

20. Write a program to count the number of swaps required to sort a given list of integers in ascending order using the selection sort algorithm.
Input:
2
3
4 2 5
5
10 11 8 7 1

Output:
1
3
 

21. Form an array of 1000 integers and find out the second-largest number. If there is no second largest number, return the value to –1.
Example
Input 1:
3
Input 2:
{2,1,2}
Output:
1
Explanation
The integer 1 is the second largest in the array.
Example
Input 1:
5
Input 2:
{4,7,9,8,0}
Output:
8
 #include <iostream>

int FindSecondLargest(int arr[], int n) {
    if (n < 2) {
        return -1; // There is no second largest number
    }

    int largest = arr[0];
    int secondLargest = -1;

    for (int i = 1; i < n; i++) {
        if (arr[i] > largest) {
            secondLargest = largest;
            largest = arr[i];
        } else if (arr[i] != largest && (secondLargest == -1 || arr[i] > secondLargest)) {
            secondLargest = arr[i];
        }
    }

    return secondLargest;
}

int main() {
    int n;
    std::cout << "Enter the size of the array: ";
    std::cin >> n;

    if (n <= 0) {
        std::cout << "Invalid input size. Please enter a positive integer." << std::endl;
        return 1;
    }

    int arr[1000]; // Assuming a maximum array size of 1000

    std::cout << "Enter " << n << " integers: ";
    for (int i = 0; i < n; i++) {
        std::cin >> arr[i];
    }

    int result = FindSecondLargest(arr, n);

    if (result == -1) {
        std::cout << "No second largest number found." << std::endl;
    } else {
        std::cout << "Second largest number: " << result << std::endl;
    }

    return 0;
}


22. Adam decides to do some charity work. From day 1 till day n, he will give i^2 coins to charity. On day ‘i’ (1 < = i < = n), find the number of coins he gives to charity.
Example 1
Input:
2
Output:
5
Explanation:
There are 2 days.
Example 2

Input:
3

Output:
14

#include <iostream>

int CalculateCoins(int n) {
    int totalCoins = 0;

    for (int i = 1; i <= n; i++) {
        totalCoins += i * i;
    }

    return totalCoins;
}

int main() {
    int n;
    std::cout << "Enter the number of days (n): ";
    std::cin >> n;

    if (n < 1) {
        std::cout << "Invalid input. Please enter a positive integer." << std::endl;
        return 1;
    }

    int totalCoins = CalculateCoins(n);

    std::cout << "Total coins given to charity from day 1 to day " << n << ": " << totalCoins << std::endl;

    return 0;
}

 

23. Perform a function to reverse a string word-wise. The input here will be the string. In the output, the last word mentioned should come as the first word and vice versa.
Example
Input:
Welcome to code
Output:
code to Welcome

Explanation
The Reversed string word wise function is applied.
Example
Input:
Code to Crack Puzzle
Output:
Puzzle Crack to Code
 

24. Find the sum of the divisors for the N integer number.
Example 1
Input:
6
Output:
12

Explanation
Divisors of 6 are 1, 2, 3, and 6. The sum of these numbers is 12.

Example 2
Input:
36
Output:
91
 
#include <iostream>

int SumOfDivisors(int n) {
    int sum = 0;
    
    for (int i = 1; i <= n; i++) {
        if (n % i == 0) {
            sum += i;
        }
    }
    
    return sum;
}

int main() {
    int N;
    std::cout << "Enter an integer N: ";
    std::cin >> N;
    
    int sum = SumOfDivisors(N);
    
    std::cout << "Sum of divisors for " << N << " is: " << sum << std::endl;
    
    return 0;
}

 

26. Find a string of a length of 1000 for a large number. Output is the modulo of 11. The output specification is to return the remainder modulo 11 of the input.
Input:
121
Output:
0

Explanation
121 mod 11 = 0
 

27. Find out if the given set of points are on a straight line or not. If the points are on a straight line, then return the equation. If not, then return 0.
Example
Input:
3
1 1 2 2 3 3
Output:
1x – 1y = 0

Explanation
The three points here are [1,1], [2,2], and [3,3]. These lie on a line, so the function returned the equation.
 

28. Write a function to find roots of a quadratic equation ax^2 + bx + c = 0.
Note: The formula to find the roots of a quadratic equation is given below:

Example
Input 1: 1
Input 2: –2
Input 3: 3
Output:
{3.0,–1.0}

Explanation:
On substituting the values of a, b, and c in the formula, the roots will be as follows:
+X = 3.0
-X = –1.0
 

29. Write a function to find if the given string is a palindrome or not. Return 1 if the input string is a palindrome, else return 0.
Input:
level
Output:
1

Explanation:
The reverse of the string ‘level’ is ‘level’. As they are the same, the string is a palindrome.
 

30. Write a function to check if the given two strings are anagrams or not. Return ‘Yes’ if they are anagrams, otherwise, return ‘No’.
Example
Input 1: build
Input 2: dubli
Output:
Yes

Explanation:

build and dubli are anagrams.Feeling like taking on more? Coding Ninjas Studio from Coding Ninjas is an exclusive and new boot camp program that helps you advance your interview prep and have a higher chance of securing your dream job. With mock interviews, coding challenges, and practice interview questions, prepare for your dream career with us!

Problem Description :
The function accepts two positive integers ‘r’ and ‘unit’ and a positive integer array ‘arr’ of size ‘n’ as its argument ‘r’ represents the number of rats present in an area, ‘unit’ is the amount of food each rat consumes and each ith element of array ‘arr’ represents the amount of food present in ‘i+1’ house number, where 0 <= i

Note:

Return -1 if the array is null
Return 0 if the total amount of food from all houses is not sufficient for all the rats.
Computed values lie within the integer range.
Example:

Input:

r: 7
unit: 2
n: 8
arr: 2 8 3 5 7 4 1 2
Output:

4

Explanation:
Total amount of food required for all rats = r * unit

= 7 * 2 = 14.

The amount of food in 1st houses = 2+8+3+5 = 18. Since, amount of food in 1st 4 houses is sufficient for all the rats. Thus, output is 4.

C++	
Run
#include<bits/stdc++.h>
using namespace std;
int calculate (int r, int unit, int arr[], int n)
{
  if (n == 0)
    return -1;
  int totalFoodRequired = r * unit;
  int foodTillNow = 0;
  int house = 0;
  for (house = 0; house < n; ++house)
    {
      foodTillNow += arr[house];
      if (foodTillNow >= totalFoodRequired)
	{
	  break;
	}
    }
  if (totalFoodRequired > foodTillNow)
    return 0;
  return house + 1;
}
int main ()
{
  int r;
  cin >> r;
  int unit;
  cin >> unit;
  int n;
  cin >> n;
  int arr[n];
  for (int i = 0; i < n; ++i)
    {
      cin >> arr[i];
    }
  cout << calculate (r, unit, arr, n);
  return 0;
}


Question 2: 
(Asked in Accenture OnCampus 10 Aug 2022, Slot 2)

Problem Description :
The Binary number system only uses two digits, 0 and 1 and number system can be called binary string. You are required to implement the following function:

int OperationsBinaryString(char* str);

The function accepts a string str as its argument. The string str consists of binary digits eparated with an alphabet as follows:

– A denotes AND operation
– B denotes OR operation
– C denotes XOR Operation
You are required to calculate the result of the string str, scanning the string to right taking one opearation at a time, and return the same.

Note:

No order of priorities of operations is required
Length of str is odd
If str is NULL or None (in case of Python), return -1
Input:
str: 1C0C1C1A0B1

Output:
1

Explanation:
The alphabets in str when expanded becomes “1 XOR 0 XOR 1 XOR 1 AND 0 OR 1”, result of the expression becomes 1, hence 1 is returned.

Sample Input:
0C1A1B1C1C1B0A0

Output:
0

C++	C	python	Java
Run
#include<bits/stdc++.h>
using namespace std;
int OperationsBinaryString (char *str)
{
  if (str == NULL)
    return -1;
  int i = 1;
  int a = *str - '0';
  str++;
  while (*str != '\0')
    {
      char p = *str;
      str++;
      if (p == 'A')
	a &= (*str - '0');
      else if (p == 'B')
	a |= (*str - '0');
      else
	a ^= (*str - '0');
      str++;
    }
  return a;
}
int main ()
{
  string s;
  getline (cin, s);
  int len = s.size ();
  char *str = &s[0];
  cout << OperationsBinaryString (str);
}




The useful input/output manipulators are std::setbase, std::setw and std::setfill. These are defined in and are quite useful functions. 
 

std::base : Set basefield flag; Sets the base-field to one of its possible values: dec, hex or oct according to argument base.
Syntax : 
std::setbase (int base);
decimal : if base is 10
hexadecimal : if base is 16
octal : if base is 8
zero : if base is any other value.
Implementation : This code uses the std::setbase manipulator to set hexadecimal as the base field selective flag.

// CPP Program to illustrate
// std::setbase manipulator
#include <iostream>
#include <iomanip> // std::setbase
 
int main()
{
    // set base to hexadecimal
    std::cout << std::setbase(16);
 
    // displaying 255 in hexadecimal
    std::cout << 255 << std::endl;
 
    // set base to Octal
    std::cout << std::setbase(8);
 
    // displaying 255 in Octal
    std::cout << 255 << std::endl;
    return 0;
}
Output: 
ff
377
std::setw : Set field width; Sets the field width to be used on output operations. Behaves as if member width were called with n as argument on the stream on which it is inserted/extracted as a manipulator (it can be inserted/extracted on input streams or output streams). 
Syntax : 
std::setw (int n);
where n is Number of characters to 
be used as field width.

// CPP Program to illustrate
// std::setw manipulator
#include <iostream>
#include <iomanip> // std::setw
 
int main()
{
 
    // set width of 10
    std::cout << std::setw(10);
    std::cout << 100 << std::endl;
 
    std::string str = "GFG";
 
    // set width of 12
    std::cout << std::setw(12);
 
    std::cout << str << std::endl;
    return 0;
}
Output: 
       100
         GFG
Note: Here argument given to setw() is minimum width of the output, so if we have output with more width than argument’s value then output width will not be exactly the argument given to setw() but will be equal to the output size(i.e., the output will not get truncated). Default width of setw() is 0.
Example: 

#include <iostream>
#include<iomanip>
#include<string>
using std::cout;
using std::string;
using std::endl;
 
int main() {
    string temp="Hello setw";
    cout<<std::setw(5)<<temp<<endl;
    return 0;
}
Output: 
Hello setw
std::setfill : Set fill character; Sets c as the stream’s fill character. Behaves as if member fill were called with c as argument on the stream on which it is inserted as a manipulator (it can be inserted on output streams).
Syntax : 
std::setfill (char_type c);
char_type is the type of characters 
used by the stream (i.e., its first class template 
parameter, charT).
Implementation : 

// CPP Program to test std::setfill manipulator
#include <iostream>
#include <iomanip> // std::setfill, std::setw
 
int main()
{
    // setfill is x and width is set as 10
    std::cout << std::setfill('x') << std::setw(10);
 
    std::cout << 77 << std::endl;
 
    std::string str = "Geeks";
 
    // setfill is G and width is set as 10
    // And std::left is used set str to left side
    std::cout << std::left << std::setfill('G') << std::setw(10);
 
    std::cout << str << std::endl;
    return 0;
}
Output: 
xxxxxxxx77
GeeksGGGGG
Pattern using std::setw and std::fill : 


// CPP Program to print
// pattern using std::setw and std::fill
#include <iostream>
#include <iomanip> // std::setfill, std::setw
 
int main()
{
    int n = 5;
    for (int i = 1; i <= n; i++) {
        std::cout << std::left << std::setfill(' ') << std::setw(n);
        std::cout << std::string(i, '*') << std::endl;
    }
}
Output: 

*
**
***
****
*****
